type User {
  id: ID!
  name: String
  friends: [User] @relation(name: "FRIENDS", direction: "BOTH")
  reviews: [Review] @relation(name: "WROTE", direction: "OUT")
  avgStars: Float
    @cypher(
      statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN toFloat(avg(r.stars))"
    )
  numReviews: Int
    @cypher(statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN COUNT(r)")
}

type Business {
  id: ID!
  name: String
  address: String
  city: String
  state: String
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type Review {
  id: ID!
  stars: Int
  text: String
  date: Date
  business: Business @relation(name: "REVIEWS", direction: "OUT")
  user: User @relation(name: "WROTE", direction: "IN")
}

type Category {
  name: ID!
  businesses: [Business] @relation(name: "IN_CATEGORY", direction: "IN")
}

type In_Category{
 selected: Int	
}


type TopicSelected @relation(name:"IN_CATEGORY"){
	from: User
	to: Category
	selected: Int
}

type Query {
  usersBySubstring(substring: String): [User]
    @cypher(
      statement: "MATCH (u:User) WHERE u.name CONTAINS $substring RETURN u"
    )

  SelectUserTopic(name:String): [TopicSelected]
      @cypher(
      statement: "match (n1:User)-[r:IN_CATEGORY]->(n2:Category) where n1.name=$name return distinct  r "
    )
}
type Mutation{
	MergeUser(name:String): User
      @cypher(
      statement: "Merge (u:User{name:$name}) set u.id='u5' RETURN u"
    )

	MergeTopic(name:String): Category
      @cypher(
      statement: "Merge (u:Category{name:$name}) RETURN u"
    )


}


